---
// Define las propiedades que acepta el componente
export interface Props {
  /** ID único de la gráfica de Grafana */
  graphId: string;
  /** Tiempo de inicio para el rango de la gráfica (ej: 'end-30m', 'now-1h') */
  startTime?: string;
  /** Tiempo final para el rango de la gráfica (ej: 'now') */
  endTime?: string;
  /** Intervalo en milisegundos para actualizar la gráfica (0 para desactivar) */
  refreshInterval?: number;
  /** Ancho del contenedor del componente (CSS value) */
  width?: string;
  /** Altura del contenedor del componente (CSS value) */
  height?: string;
  /** URL de un logo para mostrar (opcional) */
  logoUrl?: string;
  /** Altura máxima del logo (CSS value) */
  logoHeight?: string;
  /** Texto a mostrar durante la carga */
  loadingText?: string;
  /** ID único para el componente (opcional, se genera automáticamente) */
  uniqueId?: string;
  /** Parámetros adicionales para la URL de Grafana */
  extraParams?: Record<string, string>;
  /** Aspect ratio for the chart image itself, e.g., "1430 / 300" */
  imageAspectRatio?: string;
}

// Default aspect ratio if not provided, matching common Grafana chart proportions
const DEFAULT_IMAGE_ASPECT_RATIO = "1344 / 378";

// Establece valores predeterminados para props opcionales
const {
  graphId,
  startTime = "end-30m",
  endTime = "now",
  refreshInterval = 120000,
  width = "100%",
  height = "100%",
  logoUrl = "",
  logoHeight = "0px",
  loadingText = "Cargando...",
  uniqueId = `grafana-${Math.random().toString(36).substring(2, 11)}`,
  extraParams = {},
  imageAspectRatio = DEFAULT_IMAGE_ASPECT_RATIO,
} = Astro.props;

// IDs únicos para los elementos DOM
const containerId = `container-${uniqueId}`;
const imageId = `image-${uniqueId}`;
const loadingId = `loading-${uniqueId}`;
---

<div class="grafana-chart-host" id={containerId} style={`width: ${width}; height: ${height};`}>
  {logoUrl && logoHeight !== "0px" && <img src={logoUrl} class="logo" alt="Logo" />}
  <img
    id={imageId}
    alt={`Grafana Chart ${graphId}`}
    style={`display: none; max-width: 100%; max-height: 100%; width: auto; height: auto; object-fit: contain; margin: auto; border: none; padding: 0; background-color: transparent; aspect-ratio: ${imageAspectRatio};`}
  />
  <div id={loadingId} class="loading">
    {loadingText}
  </div>
</div>

<script
  define:vars={{
    containerId,
    imageId,
    loadingId,
    graphId,
    startTime,
    endTime,
    refreshInterval,
    extraParams
    // No longer passing fixed IMAGE_NATIVE_WIDTH/HEIGHT
  }}
>
  const containerElement = document.getElementById(containerId);
  const imageElement = document.getElementById(imageId);
  const loadingElement = document.getElementById(loadingId);
  let intervalId = undefined;

  const updateImageUrl = () => {
    if (containerElement && imageElement && loadingElement) {
      const actualWidth = Math.floor(containerElement.offsetWidth);
      const actualHeight = Math.floor(containerElement.offsetHeight);

      if (actualWidth === 0 || actualHeight === 0) {
        // If container has no dimensions yet, retry shortly.
        // This can happen during initial layout or if hidden.
        setTimeout(updateImageUrl, 100);
        return;
      }

      const params = new URLSearchParams({
        Graph: graphId,
        Start: startTime,
        End: endTime,
        Width: actualWidth.toString(), // Use actual container dimensions
        Height: actualHeight.toString(), // Use actual container dimensions
        Theme: "dark",
        _: new Date().getTime().toString()
      });

      for (const [key, value] of Object.entries(extraParams)) {
        params.append(key, value);
      }

      const newImageUrl = `/api/grafana-proxy?${params.toString()}`;

      if (imageElement.src !== newImageUrl) {
        loadingElement.style.display = "flex";
        imageElement.style.display = "none";
        imageElement.src = newImageUrl;
      }

      imageElement.onload = () => {
        setTimeout(() => {
          loadingElement.style.display = "none";
          imageElement.style.display = "block";
        }, 50);
      };

      imageElement.onerror = () => {
        loadingElement.innerHTML = "Error al cargar el gráfico";
        imageElement.alt = `Error al cargar gráfico ${graphId}`;
        console.error(`Error cargando gráfico ${graphId}`);
      };
    } else {
      console.error("GrafanaChart: Elementos DOM no encontrados.");
    }
  };

  let resizeObserver;

  function initialize() {
    updateImageUrl();

    if (refreshInterval > 0) {
      intervalId = window.setInterval(updateImageUrl, refreshInterval);
    }

    if (containerElement) {
      resizeObserver = new ResizeObserver(() => {
        // When the container size changes, update the image URL
        // to fetch a new image with the new dimensions.
        updateImageUrl();
      });
      resizeObserver.observe(containerElement);
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initialize);
  } else {
    initialize();
  }

  const cleanup = () => {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = undefined;
    }
    if (resizeObserver && containerElement) {
      resizeObserver.unobserve(containerElement);
    }
    if (imageElement) {
      imageElement.src = ""; // Clear src to stop loading
    }
  };

  window.addEventListener("beforeunload", cleanup);
  document.addEventListener("astro:before-swap", cleanup);
</script>

<style define:vars={{ logoHeight }}>
  .grafana-chart-host {
    position: relative;
    overflow: hidden;
    box-sizing: border-box;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .loading {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #ccc;
    background-color: rgba(30, 30, 30, 0.8);
    font-size: 0.9em;
    z-index: 1;
  }

  .logo {
    position: absolute;
    max-width: 90%;
    max-height: var(--logoHeight);
    object-fit: contain;
    z-index: 10;
    top: 8px;
    left: 8px;
  }
</style>
