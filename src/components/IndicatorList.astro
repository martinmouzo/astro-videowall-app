---
interface Props {
  region: string;
  indicadores: any[];
}

const { region, indicadores } = Astro.props;

// Mapeo de regiones del nombre de archivo al ID usado en los datos
const regionMapping: Record<string, string> = {
  'america': 'AMERICA',
  'europe': 'EUROPA',
  'asia': 'ASIA'
};

// Valores mock realistas por tipo y región
const mockValues: Record<number, Record<string, number>> = {
  3: { 'AMERICA': 779, 'EUROPA': 4323, 'ASIA': 483 }, // Tiendas abiertas
  13: { 'AMERICA': 12, 'EUROPA': 45, 'ASIA': 8 }, // Tiendas con cierre
  6: { 'AMERICA': 234, 'EUROPA': 578, 'ASIA': 156 }, // Incidencias
  4: { 'AMERICA': 5, 'EUROPA': 4, 'ASIA': 1 }, // Tiendas offline
  12: { 'AMERICA': 18, 'EUROPA': 43, 'ASIA': 12 }, // Reformas
  5: { 'AMERICA': 0, 'EUROPA': 0, 'ASIA': 0 }, // Contenidos pendientes
  1: { 'AMERICA': 1245, 'EUROPA': 3567, 'ASIA': 892 }, // Tickets acumulados
  2: { 'AMERICA': 45, 'EUROPA': 78, 'ASIA': 23 }, // Tickets online
  49: { 'AMERICA': 1890, 'EUROPA': 5432, 'ASIA': 2341 }, // Pedidos Zara
  50: { 'AMERICA': 2345, 'EUROPA': 6789, 'ASIA': 3456 } // Pedidos eCommerce
};

// Colores por tipo de indicador
const indicatorColors: Record<number, string> = {
  3: '#00ff00',  // Tiendas abiertas - Verde
  13: '#0080ff', // Tiendas con cierre - Azul
  6: '#ff8000',  // Incidencias - Naranja
  4: '#ff0000',  // Tiendas offline - Rojo
  12: '#ffff00', // Reformas - Amarillo
  5: '#ff00ff',  // Contenidos pendientes - Magenta
  1: '#00ffff',  // Tickets acumulados - Cian
  2: '#80ff80',  // Tickets online - Verde claro
  49: '#8080ff', // Pedidos Zara - Azul claro
  50: '#ff8080'  // Pedidos eCommerce - Rosa
};

// Filtrar indicadores por región
const getIndicadoresPorRegion = (indicadores: any[], region: string) => {
  const resultado: any[] = [];
  const regionKey = regionMapping[region] || region.toUpperCase();

  indicadores.forEach((tipoIndicador: any) => {
    if (!tipoIndicador.indicadores) return;

    tipoIndicador.indicadores.forEach((indicador: any) => {
      if (!indicador.nombre) return;

      const nombreRegion = indicador.nombre.toLowerCase();
      const regionBuscada = regionKey.toLowerCase();

      if (nombreRegion.includes(regionBuscada)) {
        // Buscar valor en parámetros
        let valor = 0;
        if (indicador.parametros && indicador.parametros.length > 0) {
          const numeroElementos = indicador.parametros.find((p: any) =>
            p.descripcion === "NUMERO_ELEMENTOS"
          );
          if (numeroElementos && numeroElementos.valor) {
            valor = parseInt(numeroElementos.valor);
          }
        }

        // Usar valor mock si no hay datos
        if (valor === 0) {
          valor = mockValues[tipoIndicador.idTipoIndicador]?.[regionKey] || Math.floor(Math.random() * 100);
        }

        resultado.push({
          nombre: indicador.nombre,
          descripcion: tipoIndicador.descripcion,
          valor,
          tipo: tipoIndicador.idTipoIndicador,
          label: formatIndicatorName(indicador.nombre, regionKey),
          color: indicatorColors[tipoIndicador.idTipoIndicador] || '#ffffff'
        });
      }
    });
  });

  return resultado.sort((a, b) => b.valor - a.valor);
};

// Formatear nombre del indicador
const formatIndicatorName = (nombre: string, region: string): string => {
  return nombre
    .replace(`_${region}`, '')
    .replace(/_/g, ' ')
    .toLowerCase()
    .split(' ')
    .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
};

const indicadoresRegion = getIndicadoresPorRegion(indicadores, region);
---

<div class="indicator-list">
  {indicadoresRegion.slice(0, 8).map((indicador: any) => (
    <div
      class="indicator-item"
      style={`border-left-color: ${indicador.color}`}
      data-critical={indicador.tipo === 4 && indicador.valor > 0 ? "true" : "false"}
    >
      <span class="indicator-value">{indicador.valor}</span>
      <span class="indicator-label">{indicador.label}</span>
    </div>
  ))}
</div>

<style>
  .indicator-list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px; /* Reducido de 16px a 8px para evitar desbordamiento */
    max-height: 100%;
    overflow-y: auto;
    padding: 0; /* Eliminado padding para maximizar espacio */
    font-family: 'Quicksand Variable', sans-serif;
    width: 100%; /* Asegurar que use todo el ancho disponible */
    height: 100%; /* Añadido para ocupar toda la altura disponible */
  }

  .indicator-item {
    display: flex;
    align-items: center;
    gap: 6px; /* Reducido de 8px a 6px */
    font-size: clamp(0.7em, 1.4vmin, 0.9em); /* Aumentado rango para mejor legibilidad */
    line-height: 1.1; /* Reducido para más compactación */
    padding: 6px 4px; /* Reducido padding para ahorrar espacio */
    background: rgba(255, 255, 255, 0.15); /* Mejor contraste */
    border-radius: 4px;
    border-left: 3px solid #00ff00;
    min-height: 26px; /* Reducido de 34px a 26px para mejor ajuste */
    backdrop-filter: blur(2px);
    transition: all 0.2s ease;
    box-sizing: border-box; /* Asegurar que el padding no cause desbordamiento */
  }

  .indicator-item:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateX(2px);
  }

  /* Animación de entrada para los elementos */
  .indicator-item {
    animation: slideInFromLeft 0.3s ease-out forwards;
    opacity: 0;
    transform: translateX(-20px);
  }

  .indicator-item:nth-child(1) { animation-delay: 0.1s; }
  .indicator-item:nth-child(2) { animation-delay: 0.2s; }
  .indicator-item:nth-child(3) { animation-delay: 0.3s; }
  .indicator-item:nth-child(4) { animation-delay: 0.4s; }
  .indicator-item:nth-child(5) { animation-delay: 0.5s; }
  .indicator-item:nth-child(6) { animation-delay: 0.6s; }
  .indicator-item:nth-child(7) { animation-delay: 0.7s; }
  .indicator-item:nth-child(8) { animation-delay: 0.8s; }

  @keyframes slideInFromLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Efecto de pulso para valores críticos */
  .indicator-item[data-critical="true"] {
    animation: criticalPulse 2s ease-in-out infinite;
  }

  @keyframes criticalPulse {
    0%, 100% {
      box-shadow: 0 0 5px rgba(255, 0, 0, 0.3);
    }
    50% {
      box-shadow: 0 0 15px rgba(255, 0, 0, 0.8);
    }
  }

  .indicator-value {
    font-weight: bold;
    color: #ffffff;
    min-width: 28px; /* Reducido de 36px a 28px */
    text-align: right;
    font-size: 1em; /* Reducido de 1.1em para mejor ajuste */
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
  }

  .indicator-label {
    color: #e0e0e0;
    font-size: 0.95em; /* Aumentado de 0.85em para mejor legibilidad */
    font-weight: 600; /* Añadido peso de fuente para mejor visibilidad */
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    flex: 1;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
  }

  /* Scrollbar personalizado */
  .indicator-list::-webkit-scrollbar {
    width: 3px;
  }

  .indicator-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  }

  .indicator-list::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 2px;
  }

  .indicator-list::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  /* Responsive adjustments */
  @media (max-width: 1400px) {
    .indicator-list {
      gap: 8px;
      padding: 6px;
    }

    .indicator-item {
      font-size: clamp(0.7em, 1.4vmin, 0.85em); /* Aumentado */
      padding: 5px 7px;
      min-height: 24px;
      gap: 6px;
    }

    .indicator-value {
      min-width: 32px;
      font-size: 1em;
    }

    .indicator-label {
      font-size: 0.9em;
    }
  }

  @media (max-width: 1000px) {
    .indicator-list {
      gap: 3px;
      padding: 4px;
    }

    .indicator-item {
      font-size: clamp(0.6em, 1.2vmin, 0.75em); /* Aumentado */
      padding: 4px 5px;
      min-height: 20px;
      gap: 4px;
    }

    .indicator-value {
      min-width: 28px;
      font-size: 0.95em;
    }

    .indicator-label {
      font-size: 0.85em;
    }
  }

  @media (max-width: 800px) {
    .indicator-list {
      grid-template-columns: 1fr;
      gap: 2px;
    }
  }
</style>
