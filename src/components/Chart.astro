---
interface Props {
  uniqueIdPrefix: string;
  grafanaBaseUrl: string;
  grafanaGraphId: string;
  title?: string;
  imgSrc?: string;
  imgAlt?: string;
  initialLoadingText?: string;
  refreshIntervalSeconds?: number;
}

const {
  uniqueIdPrefix,
  grafanaBaseUrl,
  grafanaGraphId,
  title,
  imgSrc,
  imgAlt = title || 'Chart Image',
  initialLoadingText = "Cargando gr치fico...",
  refreshIntervalSeconds = 60,
} = Astro.props;

const containerId = `${uniqueIdPrefix}-chart-container`;
const headerId = `${uniqueIdPrefix}-chart-header`;
const contentWrapperId = `${uniqueIdPrefix}-chart-content-wrapper`;
const iframeId = `${uniqueIdPrefix}-chart-iframe`;
const loadingId = `${uniqueIdPrefix}-chart-loading`;
---

<div class="chart-component-container" id={containerId}>
  {(imgSrc || title) && (
    <div class="chart-header" id={headerId}>
      {imgSrc && <img src={imgSrc} alt={imgAlt} class="chart-image" />}
      {title && <h3 class="chart-title">{title}</h3>}
    </div>
  )}
  <div class="chart-iframe-wrapper" id={contentWrapperId}>
    <iframe
      id={iframeId}
      style="display: none; width: 100%; height: 100%; border: none; background-color: transparent;"
      title={title || `Chart ${grafanaGraphId}`}
    ></iframe>
    <div id={loadingId} class="loading-indicator">
      {initialLoadingText}
    </div>
  </div>
</div>

<script define:vars={{
  p_grafanaBaseUrl: grafanaBaseUrl,
  p_grafanaGraphId: grafanaGraphId,
  p_contentWrapperId: contentWrapperId,
  p_iframeId: iframeId,
  p_loadingId: loadingId,
  p_refreshIntervalMs: refreshIntervalSeconds * 1000
}}>
  const chartContentWrapperElement = document.getElementById(p_contentWrapperId);
  const iframeElement = document.getElementById(p_iframeId);
  const loadingDivElement = document.getElementById(p_loadingId);
  let intervalId = undefined;

  const updateIframeUrl = () => {
    if (chartContentWrapperElement && iframeElement && loadingDivElement) {
      const actualWidth = chartContentWrapperElement.offsetWidth;
      const actualHeight = chartContentWrapperElement.offsetHeight;

      if (actualWidth === 0 || actualHeight === 0) {
        setTimeout(updateIframeUrl, 150); // Increased timeout slightly
        return;
      }

      const timestamp = new Date().getTime();
      const params = new URLSearchParams({
        grafanaBaseUrl: p_grafanaBaseUrl,
        Graph: p_grafanaGraphId,
        Start: "end-30m",
        End: "now",
        Width: actualWidth.toString(),
        Height: actualHeight.toString(),
        _: timestamp.toString(),
      });

      const newIframeUrl = `/api/grafana-proxy?${params.toString()}`;

      if (iframeElement.src !== newIframeUrl) {
        loadingDivElement.style.display = "flex";
        iframeElement.style.display = "none";
        iframeElement.src = newIframeUrl;
      }

      iframeElement.onload = () => {
        loadingDivElement.style.display = "none";
        iframeElement.style.display = "block";
      };
      iframeElement.onerror = () => {
        loadingDivElement.textContent = "Error al cargar el gr치fico.";
        loadingDivElement.style.display = "flex";
        iframeElement.style.display = "none";
      };
    } else {
      console.error(
        `Chart [${p_iframeId}]: Critical elements not found.`
      );
      if(loadingDivElement) loadingDivElement.textContent = "Error de configuraci칩n del componente.";
    }
  };

  function initialize() {
    if (!chartContentWrapperElement || !iframeElement || !loadingDivElement) {
      console.error(`Chart [${p_iframeId}] init failed: one or more critical elements not found.`);
      if(loadingDivElement) loadingDivElement.textContent = "Error de inicializaci칩n.";
      return;
    }
    updateIframeUrl();
    if (p_refreshIntervalMs > 0) {
        intervalId = window.setInterval(updateIframeUrl, p_refreshIntervalMs);
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initialize);
  } else {
    initialize();
  }

  const cleanup = () => {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = undefined;
    }
    if (iframeElement) {
        iframeElement.onload = null;
        iframeElement.onerror = null;
    }
  };

  window.addEventListener("beforeunload", cleanup);
  document.addEventListener("astro:before-swap", cleanup);
</script>

<style>
  .chart-component-container {
    width: 100%;
    height: 350px; /* Default height, can be overridden */
    background-color: #1e1e1e;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    border: 1px solid #2a2a2a;
    box-sizing: border-box;
  }
  .chart-header {
    padding: 8px 12px;
    text-align: center;
    flex-shrink: 0;
    background-color: #252526;
    border-bottom: 1px solid #333;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    min-height: 40px; /* Ensure header has some height even if empty */
  }
  .chart-image {
    max-height: 30px;
    max-width: 120px;
    object-fit: contain;
  }
  .chart-title {
    margin: 0;
    font-size: 0.9em;
    color: #e0e0e0;
    font-weight: 500;
  }
  .chart-iframe-wrapper {
    flex-grow: 1;
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
  .loading-indicator {
    position: absolute;
    inset: 0; /* Shorthand for top, right, bottom, left = 0 */
    display: flex;
    align-items: center;
    justify-content: center;
    color: #ccc;
    background-color: rgba(30, 30, 30, 0.85);
    z-index: 10;
    font-size: 0.9em;
  }
</style>