---
interface Props {
  region: string;
  indicadores: any[];
}

const { region, indicadores } = Astro.props;

// Mapeo de regiones
const regionMapping: Record<string, string> = {
  'america': 'AMERICA',
  'europe': 'EUROPA',
  'asia': 'ASIA'
};

// Valores mock para el resumen
const mockValues: Record<number, Record<string, number>> = {
  3: { 'AMERICA': 779, 'EUROPA': 4323, 'ASIA': 483 }, // Tiendas abiertas
  6: { 'AMERICA': 234, 'EUROPA': 578, 'ASIA': 156 }, // Incidencias
  4: { 'AMERICA': 5, 'EUROPA': 4, 'ASIA': 1 }, // Tiendas offline
};

const regionKey = regionMapping[region] || region.toUpperCase();

// Obtener valores para el resumen
const totalTiendas = mockValues[3][regionKey] || 0;
const incidencias = mockValues[6][regionKey] || 0;
const offline = mockValues[4][regionKey] || 0;

// Determinar color de estado basado en indicadores críticos
const getStatusColor = () => {
  if (offline > 10) return '#ff4444'; // Rojo crítico
  if (offline > 5) return '#ff8800'; // Naranja advertencia
  if (incidencias > 500) return '#ffaa00'; // Amarillo
  return '#44ff44'; // Verde normal
};
---

<div class="region-summary">
  <div class="status-indicator" style={`background-color: ${getStatusColor()}`}></div>
  <div class="summary-stats">
    <div class="stat-item">
      <span class="stat-value">{totalTiendas}</span>
      <span class="stat-label">Tiendas</span>
    </div>
    {incidencias > 0 && (
      <div class="stat-item warning">
        <span class="stat-value">{incidencias}</span>
        <span class="stat-label">Incidencias</span>
      </div>
    )}
    {offline > 0 && (
      <div class="stat-item critical">
        <span class="stat-value">{offline}</span>
        <span class="stat-label">Offline</span>
      </div>
    )}
  </div>
</div>

<style>
  .region-summary {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px; /* Aumentado de 6px a 8px */
    margin: 0.3em auto; /* Aumentado margen */
    padding: 0.4em 0.6em; /* Aumentado padding */
    background: rgba(0, 0, 0, 0.3);
    border-radius: 12px; /* Aumentado radio */
    backdrop-filter: blur(4px);
    width: fit-content;
    max-width: 100%;
  }

  .status-indicator {
    width: 12px; /* Aumentado de 10px */
    height: 12px; /* Aumentado de 10px */
    border-radius: 50%;
    box-shadow: 0 0 10px currentColor;
    animation: pulse 2s ease-in-out infinite;
    flex-shrink: 0;
  }

  .summary-stats {
    display: flex;
    gap: 10px; /* Aumentado gap */
    font-size: 0.85em; /* Aumentado de 0.75em */
    align-items: center;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2px;
  }

  .stat-item.critical {
    color: #ff6666;
  }

  .stat-item.warning {
    color: #ffaa66;
  }

  .stat-value {
    font-weight: bold;
    font-size: 1.1em; /* Aumentado de 1.0em */
    line-height: 1;
    font-family: 'Roboto Mono Variable', 'Roboto Mono', monospace;
    font-weight: 600;
    font-variant-numeric: tabular-nums;
    letter-spacing: 0.3px; /* Aumentado espaciado */
  }

  .stat-label {
    font-size: 0.8em; /* Aumentado de 0.7em */
    opacity: 0.8;
    text-transform: uppercase;
    letter-spacing: 0.4px; /* Aumentado espaciado */
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }

  @media (max-width: 1400px) {
    .region-summary {
      margin: 0.1em auto; /* Reducido margen para pantallas pequeñas */
      padding: 0.1em 0.3em; /* Reducido padding */
      gap: 5px; /* Reducido gap */
    }

    .summary-stats {
      font-size: 0.7em; /* Reducido de 0.75em */
      gap: 6px; /* Reducido gap */
    }

    .status-indicator {
      width: 7px; /* Reducido de 8px */
      height: 7px; /* Reducido de 8px */
    }
  }
</style>
